//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.1.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, from as _observableFrom, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';
export const FILES_API_URL = new InjectionToken<string>('FILES_API_URL');

export default class BaseApiService {
  protected transformOptions(options: any): Promise<any> {
    const session_token = document.cookie
      .split(';')
      .map((x) => x.trim().split('='))
      .find(x => x[0] == 'USER_SESSION');

    if(session_token !== null && session_token !== undefined) {
      options.headers = options.headers.append('Authorization', session_token[1]);
    }

    return Promise.resolve(options);
  }
}

export interface IFilesApiService {
    /**
     * Mark file as deleted
     * @param id (optional) 
     * @return Success
     */
    markFileAsDeleted(id: string | undefined): Observable<SwaggerResponse<void>>;
    /**
     * Modify type of file
     * @param id (optional) 
     * @param type (optional) 
     * @return Success
     */
    modifyFileType(id: string | undefined, type: string | undefined): Observable<SwaggerResponse<void>>;
    /**
     * Modify a name of file
     * @param id (optional) 
     * @param name (optional) 
     * @return Success
     */
    modifyFileName(id: string | undefined, name: string | undefined): Observable<SwaggerResponse<void>>;
    /**
     * Get metadata of a file
     * @return Success
     */
    getFileMetadata(id: string): Observable<SwaggerResponse<FileMetadataDto>>;
    /**
     * Add file to File Storage Service
     * @param content (optional) 
     * @param type (optional) 
     * @return Success
     */
    addFile(content: FileParameter | undefined, type: string | undefined): Observable<SwaggerResponse<AddFileResultDto>>;
    /**
     * Download file from File Storage Service
     * @param id (optional) 
     * @return Success
     */
    downloadFile(id: string | undefined): Observable<SwaggerResponse<FileResponse>>;
    /**
     * Download multiple files from File Storage Service
     * @param body (optional) 
     * @return Success
     */
    downloadFiles(body: DownloadFileInputsDto | undefined): Observable<SwaggerResponse<FileResponse>>;
    /**
     * Get info about file downloads from File Storage Service
     * @param id (optional) 
     * @return Success
     */
    getFileDownloads(id: string | undefined): Observable<SwaggerResponse<FileDownloadInfoListDto>>;
}

@Injectable({
    providedIn: 'root'
})
export class FilesApiService extends BaseApiService implements IFilesApiService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(FILES_API_URL) baseUrl?: string) {
        super();
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Mark file as deleted
     * @param id (optional) 
     * @return Success
     */
    markFileAsDeleted(id: string | undefined): Observable<SwaggerResponse<void>> {
        let url_ = this.baseUrl + "/api/FileStorage/MarkAsDeleted?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("patch", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processMarkFileAsDeleted(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processMarkFileAsDeleted(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SwaggerResponse<void>>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SwaggerResponse<void>>;
        }));
    }

    protected processMarkFileAsDeleted(response: HttpResponseBase): Observable<SwaggerResponse<void>> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf<SwaggerResponse<void>>(new SwaggerResponse(status, _headers, null as any));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<void>>(new SwaggerResponse(status, _headers, null as any));
    }

    /**
     * Modify type of file
     * @param id (optional) 
     * @param type (optional) 
     * @return Success
     */
    modifyFileType(id: string | undefined, type: string | undefined): Observable<SwaggerResponse<void>> {
        let url_ = this.baseUrl + "/api/FileStorage/Modify/Type?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("patch", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processModifyFileType(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processModifyFileType(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SwaggerResponse<void>>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SwaggerResponse<void>>;
        }));
    }

    protected processModifyFileType(response: HttpResponseBase): Observable<SwaggerResponse<void>> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf<SwaggerResponse<void>>(new SwaggerResponse(status, _headers, null as any));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<void>>(new SwaggerResponse(status, _headers, null as any));
    }

    /**
     * Modify a name of file
     * @param id (optional) 
     * @param name (optional) 
     * @return Success
     */
    modifyFileName(id: string | undefined, name: string | undefined): Observable<SwaggerResponse<void>> {
        let url_ = this.baseUrl + "/api/FileStorage/Modify/Name?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        if (name === null)
            throw new Error("The parameter 'name' cannot be null.");
        else if (name !== undefined)
            url_ += "name=" + encodeURIComponent("" + name) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("patch", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processModifyFileName(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processModifyFileName(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SwaggerResponse<void>>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SwaggerResponse<void>>;
        }));
    }

    protected processModifyFileName(response: HttpResponseBase): Observable<SwaggerResponse<void>> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf<SwaggerResponse<void>>(new SwaggerResponse(status, _headers, null as any));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<void>>(new SwaggerResponse(status, _headers, null as any));
    }

    /**
     * Get metadata of a file
     * @return Success
     */
    getFileMetadata(id: string): Observable<SwaggerResponse<FileMetadataDto>> {
        let url_ = this.baseUrl + "/api/FileStorage/Metadata/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGetFileMetadata(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetFileMetadata(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SwaggerResponse<FileMetadataDto>>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SwaggerResponse<FileMetadataDto>>;
        }));
    }

    protected processGetFileMetadata(response: HttpResponseBase): Observable<SwaggerResponse<FileMetadataDto>> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FileMetadataDto.fromJS(resultData200);
            return _observableOf(new SwaggerResponse(status, _headers, result200));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<FileMetadataDto>>(new SwaggerResponse(status, _headers, null as any));
    }

    /**
     * Add file to File Storage Service
     * @param content (optional) 
     * @param type (optional) 
     * @return Success
     */
    addFile(content: FileParameter | undefined, type: string | undefined): Observable<SwaggerResponse<AddFileResultDto>> {
        let url_ = this.baseUrl + "/api/FileTransfer/Add";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (content === null || content === undefined)
            throw new Error("The parameter 'content' cannot be null.");
        else
            content_.append("Content", content.data, content.fileName ? content.fileName : "Content");
        if (type === null || type === undefined)
            throw new Error("The parameter 'type' cannot be null.");
        else
            content_.append("Type", type.toString());

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processAddFile(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddFile(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SwaggerResponse<AddFileResultDto>>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SwaggerResponse<AddFileResultDto>>;
        }));
    }

    protected processAddFile(response: HttpResponseBase): Observable<SwaggerResponse<AddFileResultDto>> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AddFileResultDto.fromJS(resultData200);
            return _observableOf(new SwaggerResponse(status, _headers, result200));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<AddFileResultDto>>(new SwaggerResponse(status, _headers, null as any));
    }

    /**
     * Download file from File Storage Service
     * @param id (optional) 
     * @return Success
     */
    downloadFile(id: string | undefined): Observable<SwaggerResponse<FileResponse>> {
        let url_ = this.baseUrl + "/api/FileTransfer/Download/Single?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("patch", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processDownloadFile(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDownloadFile(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SwaggerResponse<FileResponse>>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SwaggerResponse<FileResponse>>;
        }));
    }

    protected processDownloadFile(response: HttpResponseBase): Observable<SwaggerResponse<FileResponse>> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return _observableOf(new SwaggerResponse(status, _headers, { fileName: fileName, data: responseBlob as any, status: status, headers: _headers }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<FileResponse>>(new SwaggerResponse(status, _headers, null as any));
    }

    /**
     * Download multiple files from File Storage Service
     * @param body (optional) 
     * @return Success
     */
    downloadFiles(body: DownloadFileInputsDto | undefined): Observable<SwaggerResponse<FileResponse>> {
        let url_ = this.baseUrl + "/api/FileTransfer/Download/Multiple";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("patch", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processDownloadFiles(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDownloadFiles(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SwaggerResponse<FileResponse>>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SwaggerResponse<FileResponse>>;
        }));
    }

    protected processDownloadFiles(response: HttpResponseBase): Observable<SwaggerResponse<FileResponse>> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return _observableOf(new SwaggerResponse(status, _headers, { fileName: fileName, data: responseBlob as any, status: status, headers: _headers }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<FileResponse>>(new SwaggerResponse(status, _headers, null as any));
    }

    /**
     * Get info about file downloads from File Storage Service
     * @param id (optional) 
     * @return Success
     */
    getFileDownloads(id: string | undefined): Observable<SwaggerResponse<FileDownloadInfoListDto>> {
        let url_ = this.baseUrl + "/api/FileTransfer/Download/GetEntries?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGetFileDownloads(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetFileDownloads(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SwaggerResponse<FileDownloadInfoListDto>>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SwaggerResponse<FileDownloadInfoListDto>>;
        }));
    }

    protected processGetFileDownloads(response: HttpResponseBase): Observable<SwaggerResponse<FileDownloadInfoListDto>> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FileDownloadInfoListDto.fromJS(resultData200);
            return _observableOf(new SwaggerResponse(status, _headers, result200));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<FileDownloadInfoListDto>>(new SwaggerResponse(status, _headers, null as any));
    }
}

export class AddFileResultDto implements IAddFileResultDto {
    id?: string;
    success?: boolean;

    constructor(data?: IAddFileResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.success = _data["success"];
        }
    }

    static fromJS(data: any): AddFileResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new AddFileResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["success"] = this.success;
        return data;
    }
}

export interface IAddFileResultDto {
    id?: string;
    success?: boolean;
}

export class DownloadFileInputsDto implements IDownloadFileInputsDto {
    ids?: string[] | undefined;
    archiveName?: string | undefined;

    constructor(data?: IDownloadFileInputsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["ids"])) {
                this.ids = [] as any;
                for (let item of _data["ids"])
                    this.ids!.push(item);
            }
            this.archiveName = _data["archiveName"];
        }
    }

    static fromJS(data: any): DownloadFileInputsDto {
        data = typeof data === 'object' ? data : {};
        let result = new DownloadFileInputsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.ids)) {
            data["ids"] = [];
            for (let item of this.ids)
                data["ids"].push(item);
        }
        data["archiveName"] = this.archiveName;
        return data;
    }
}

export interface IDownloadFileInputsDto {
    ids?: string[] | undefined;
    archiveName?: string | undefined;
}

export class FileDownloadInfoDto implements IFileDownloadInfoDto {
    timestamp?: Date;
    isSuccessful?: boolean;
    fileId?: string;

    constructor(data?: IFileDownloadInfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.timestamp = _data["timestamp"] ? new Date(_data["timestamp"].toString()) : <any>undefined;
            this.isSuccessful = _data["isSuccessful"];
            this.fileId = _data["fileId"];
        }
    }

    static fromJS(data: any): FileDownloadInfoDto {
        data = typeof data === 'object' ? data : {};
        let result = new FileDownloadInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["timestamp"] = this.timestamp ? this.timestamp.toISOString() : <any>undefined;
        data["isSuccessful"] = this.isSuccessful;
        data["fileId"] = this.fileId;
        return data;
    }
}

export interface IFileDownloadInfoDto {
    timestamp?: Date;
    isSuccessful?: boolean;
    fileId?: string;
}

export class FileDownloadInfoListDto implements IFileDownloadInfoListDto {
    count?: number;
    items?: FileDownloadInfoDto[] | undefined;

    constructor(data?: IFileDownloadInfoListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.count = _data["count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(FileDownloadInfoDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): FileDownloadInfoListDto {
        data = typeof data === 'object' ? data : {};
        let result = new FileDownloadInfoListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["count"] = this.count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

export interface IFileDownloadInfoListDto {
    count?: number;
    items?: FileDownloadInfoDto[] | undefined;
}

export class FileMetadataDto implements IFileMetadataDto {
    name?: string | undefined;
    extension?: string | undefined;
    mimetype?: string | undefined;
    size?: number;
    visible?: boolean;
    uploadDate?: Date;

    constructor(data?: IFileMetadataDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.extension = _data["extension"];
            this.mimetype = _data["mimetype"];
            this.size = _data["size"];
            this.visible = _data["visible"];
            this.uploadDate = _data["uploadDate"] ? new Date(_data["uploadDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): FileMetadataDto {
        data = typeof data === 'object' ? data : {};
        let result = new FileMetadataDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["extension"] = this.extension;
        data["mimetype"] = this.mimetype;
        data["size"] = this.size;
        data["visible"] = this.visible;
        data["uploadDate"] = this.uploadDate ? this.uploadDate.toISOString() : <any>undefined;
        return data;
    }
}

export interface IFileMetadataDto {
    name?: string | undefined;
    extension?: string | undefined;
    mimetype?: string | undefined;
    size?: number;
    visible?: boolean;
    uploadDate?: Date;
}

export class SwaggerResponse<TResult> {
    status: number;
    headers: { [key: string]: any; };
    result: TResult;

    constructor(status: number, headers: { [key: string]: any; }, result: TResult)
    {
        this.status = status;
        this.headers = headers;
        this.result = result;
    }
}

export interface FileParameter {
    data: any;
    fileName: string;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}