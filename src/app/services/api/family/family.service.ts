//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.1.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, from as _observableFrom, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';
export const FAMILIES_API_URL = new InjectionToken<string>('FAMILIES_API_URL');

export default class BaseApiService {
  protected transformOptions(options: any): Promise<any> {
    const session_token = document.cookie
      .split(';')
      .map((x) => x.trim().split('='))
      .find(x => x[0] == 'USER_SESSION');

    if(session_token !== null && session_token !== undefined) {
      options.headers = options.headers.append('Authorization', session_token[1]);
    }

    return Promise.resolve(options);
  }
}

export interface IFamilyApiService {
    /**
     * Add new family
     * @param body (optional) 
     * @return Success
     */
    addNewFamily(body: AddNewFamilyDto | undefined): Observable<SwaggerResponse<AddNewFamilyReturnDto>>;
    /**
     * Delete specified family
     * @param id (optional) 
     * @return Success
     */
    deleteFamily(id: number | undefined): Observable<SwaggerResponse<void>>;
    /**
     * Add user to specified family
     * @param body (optional) 
     * @return Success
     */
    addUserToFamily(body: AddUserToFamilyDto | undefined): Observable<SwaggerResponse<void>>;
    /**
     * Delete user from specified family
     * @param body (optional) 
     * @return Success
     */
    deleteUserFromFamily(body: DeleteUserFromFamilyDto | undefined): Observable<SwaggerResponse<void>>;
    /**
     * Set a user role to specified family
     * @param body (optional) 
     * @return Success
     */
    setUserFamilyRole(body: SetUserFamilyRoleDto | undefined): Observable<SwaggerResponse<void>>;
    /**
     * Get a list of active user's family memberships
     * @return Success
     */
    getFamilyMembershipsForUser(): Observable<SwaggerResponse<UserFamilyRoleListDto>>;
    /**
     * Get a list of family members by family ID
     * @return Success
     */
    getFamilyMembers(familyId: number): Observable<SwaggerResponse<UserFamilyRoleListDto>>;
}

@Injectable({
    providedIn: 'root'
})
export class FamilyApiService extends BaseApiService implements IFamilyApiService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(FAMILIES_API_URL) baseUrl?: string) {
        super();
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Add new family
     * @param body (optional) 
     * @return Success
     */
    addNewFamily(body: AddNewFamilyDto | undefined): Observable<SwaggerResponse<AddNewFamilyReturnDto>> {
        let url_ = this.baseUrl + "/api/Family/Add";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processAddNewFamily(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddNewFamily(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SwaggerResponse<AddNewFamilyReturnDto>>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SwaggerResponse<AddNewFamilyReturnDto>>;
        }));
    }

    protected processAddNewFamily(response: HttpResponseBase): Observable<SwaggerResponse<AddNewFamilyReturnDto>> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AddNewFamilyReturnDto.fromJS(resultData200);
            return _observableOf(new SwaggerResponse(status, _headers, result200));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<AddNewFamilyReturnDto>>(new SwaggerResponse(status, _headers, null as any));
    }

    /**
     * Delete specified family
     * @param id (optional) 
     * @return Success
     */
    deleteFamily(id: number | undefined): Observable<SwaggerResponse<void>> {
        let url_ = this.baseUrl + "/api/Family/Delete?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("delete", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processDeleteFamily(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteFamily(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SwaggerResponse<void>>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SwaggerResponse<void>>;
        }));
    }

    protected processDeleteFamily(response: HttpResponseBase): Observable<SwaggerResponse<void>> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf<SwaggerResponse<void>>(new SwaggerResponse(status, _headers, null as any));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<void>>(new SwaggerResponse(status, _headers, null as any));
    }

    /**
     * Add user to specified family
     * @param body (optional) 
     * @return Success
     */
    addUserToFamily(body: AddUserToFamilyDto | undefined): Observable<SwaggerResponse<void>> {
        let url_ = this.baseUrl + "/api/Family/Add/User";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processAddUserToFamily(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddUserToFamily(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SwaggerResponse<void>>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SwaggerResponse<void>>;
        }));
    }

    protected processAddUserToFamily(response: HttpResponseBase): Observable<SwaggerResponse<void>> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf<SwaggerResponse<void>>(new SwaggerResponse(status, _headers, null as any));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<void>>(new SwaggerResponse(status, _headers, null as any));
    }

    /**
     * Delete user from specified family
     * @param body (optional) 
     * @return Success
     */
    deleteUserFromFamily(body: DeleteUserFromFamilyDto | undefined): Observable<SwaggerResponse<void>> {
        let url_ = this.baseUrl + "/api/Family/Delete/User";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("delete", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processDeleteUserFromFamily(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteUserFromFamily(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SwaggerResponse<void>>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SwaggerResponse<void>>;
        }));
    }

    protected processDeleteUserFromFamily(response: HttpResponseBase): Observable<SwaggerResponse<void>> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf<SwaggerResponse<void>>(new SwaggerResponse(status, _headers, null as any));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<void>>(new SwaggerResponse(status, _headers, null as any));
    }

    /**
     * Set a user role to specified family
     * @param body (optional) 
     * @return Success
     */
    setUserFamilyRole(body: SetUserFamilyRoleDto | undefined): Observable<SwaggerResponse<void>> {
        let url_ = this.baseUrl + "/api/Family/Set/UserRole";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("patch", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSetUserFamilyRole(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSetUserFamilyRole(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SwaggerResponse<void>>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SwaggerResponse<void>>;
        }));
    }

    protected processSetUserFamilyRole(response: HttpResponseBase): Observable<SwaggerResponse<void>> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf<SwaggerResponse<void>>(new SwaggerResponse(status, _headers, null as any));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<void>>(new SwaggerResponse(status, _headers, null as any));
    }

    /**
     * Get a list of active user's family memberships
     * @return Success
     */
    getFamilyMembershipsForUser(): Observable<SwaggerResponse<UserFamilyRoleListDto>> {
        let url_ = this.baseUrl + "/api/Family/FamilyMembers";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGetFamilyMembershipsForUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetFamilyMembershipsForUser(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SwaggerResponse<UserFamilyRoleListDto>>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SwaggerResponse<UserFamilyRoleListDto>>;
        }));
    }

    protected processGetFamilyMembershipsForUser(response: HttpResponseBase): Observable<SwaggerResponse<UserFamilyRoleListDto>> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserFamilyRoleListDto.fromJS(resultData200);
            return _observableOf(new SwaggerResponse(status, _headers, result200));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<UserFamilyRoleListDto>>(new SwaggerResponse(status, _headers, null as any));
    }

    /**
     * Get a list of family members by family ID
     * @return Success
     */
    getFamilyMembers(familyId: number): Observable<SwaggerResponse<UserFamilyRoleListDto>> {
        let url_ = this.baseUrl + "/api/Family/FamilyMembers/{familyId}";
        if (familyId === undefined || familyId === null)
            throw new Error("The parameter 'familyId' must be defined.");
        url_ = url_.replace("{familyId}", encodeURIComponent("" + familyId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGetFamilyMembers(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetFamilyMembers(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SwaggerResponse<UserFamilyRoleListDto>>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SwaggerResponse<UserFamilyRoleListDto>>;
        }));
    }

    protected processGetFamilyMembers(response: HttpResponseBase): Observable<SwaggerResponse<UserFamilyRoleListDto>> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserFamilyRoleListDto.fromJS(resultData200);
            return _observableOf(new SwaggerResponse(status, _headers, result200));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<UserFamilyRoleListDto>>(new SwaggerResponse(status, _headers, null as any));
    }
}

export class AddNewFamilyDto implements IAddNewFamilyDto {
    name?: string | undefined;
    founderId?: number;

    constructor(data?: IAddNewFamilyDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.founderId = _data["founderId"];
        }
    }

    static fromJS(data: any): AddNewFamilyDto {
        data = typeof data === 'object' ? data : {};
        let result = new AddNewFamilyDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["founderId"] = this.founderId;
        return data;
    }
}

export interface IAddNewFamilyDto {
    name?: string | undefined;
    founderId?: number;
}

export class AddNewFamilyReturnDto implements IAddNewFamilyReturnDto {
    id?: number;
    name?: string | undefined;

    constructor(data?: IAddNewFamilyReturnDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): AddNewFamilyReturnDto {
        data = typeof data === 'object' ? data : {};
        let result = new AddNewFamilyReturnDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

export interface IAddNewFamilyReturnDto {
    id?: number;
    name?: string | undefined;
}

export class AddUserToFamilyDto implements IAddUserToFamilyDto {
    email?: string | undefined;
    familyId?: number;

    constructor(data?: IAddUserToFamilyDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.familyId = _data["familyId"];
        }
    }

    static fromJS(data: any): AddUserToFamilyDto {
        data = typeof data === 'object' ? data : {};
        let result = new AddUserToFamilyDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["familyId"] = this.familyId;
        return data;
    }
}

export interface IAddUserToFamilyDto {
    email?: string | undefined;
    familyId?: number;
}

export class DeleteUserFromFamilyDto implements IDeleteUserFromFamilyDto {
    email?: string | undefined;
    familyId?: number;

    constructor(data?: IDeleteUserFromFamilyDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.familyId = _data["familyId"];
        }
    }

    static fromJS(data: any): DeleteUserFromFamilyDto {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteUserFromFamilyDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["familyId"] = this.familyId;
        return data;
    }
}

export interface IDeleteUserFromFamilyDto {
    email?: string | undefined;
    familyId?: number;
}

export class FamilyDto implements IFamilyDto {
    id?: number;
    name?: string | undefined;

    constructor(data?: IFamilyDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): FamilyDto {
        data = typeof data === 'object' ? data : {};
        let result = new FamilyDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

export interface IFamilyDto {
    id?: number;
    name?: string | undefined;
}

export class FamilyRoleDto implements IFamilyRoleDto {
    id?: number;
    name?: string | undefined;

    constructor(data?: IFamilyRoleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): FamilyRoleDto {
        data = typeof data === 'object' ? data : {};
        let result = new FamilyRoleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

export interface IFamilyRoleDto {
    id?: number;
    name?: string | undefined;
}

export class SetUserFamilyRoleDto implements ISetUserFamilyRoleDto {
    email?: string | undefined;
    familyId?: number;
    familyRoleId?: number;

    constructor(data?: ISetUserFamilyRoleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.familyId = _data["familyId"];
            this.familyRoleId = _data["familyRoleId"];
        }
    }

    static fromJS(data: any): SetUserFamilyRoleDto {
        data = typeof data === 'object' ? data : {};
        let result = new SetUserFamilyRoleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["familyId"] = this.familyId;
        data["familyRoleId"] = this.familyRoleId;
        return data;
    }
}

export interface ISetUserFamilyRoleDto {
    email?: string | undefined;
    familyId?: number;
    familyRoleId?: number;
}

export class UserDto implements IUserDto {
    id?: number;
    email?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    registerDate?: Date;
    birthDate?: Date;
    description?: string | undefined;
    profileImage?: string;

    constructor(data?: IUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.email = _data["email"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.registerDate = _data["registerDate"] ? new Date(_data["registerDate"].toString()) : <any>undefined;
            this.birthDate = _data["birthDate"] ? new Date(_data["birthDate"].toString()) : <any>undefined;
            this.description = _data["description"];
            this.profileImage = _data["profileImage"];
        }
    }

    static fromJS(data: any): UserDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["email"] = this.email;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["registerDate"] = this.registerDate ? this.registerDate.toISOString() : <any>undefined;
        data["birthDate"] = this.birthDate ? this.birthDate.toISOString() : <any>undefined;
        data["description"] = this.description;
        data["profileImage"] = this.profileImage;
        return data;
    }
}

export interface IUserDto {
    id?: number;
    email?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    registerDate?: Date;
    birthDate?: Date;
    description?: string | undefined;
    profileImage?: string;
}

export class UserFamilyRoleDto implements IUserFamilyRoleDto {
    user?: UserDto;
    family?: FamilyDto;
    familyRole?: FamilyRoleDto;

    constructor(data?: IUserFamilyRoleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.user = _data["user"] ? UserDto.fromJS(_data["user"]) : <any>undefined;
            this.family = _data["family"] ? FamilyDto.fromJS(_data["family"]) : <any>undefined;
            this.familyRole = _data["familyRole"] ? FamilyRoleDto.fromJS(_data["familyRole"]) : <any>undefined;
        }
    }

    static fromJS(data: any): UserFamilyRoleDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserFamilyRoleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        data["family"] = this.family ? this.family.toJSON() : <any>undefined;
        data["familyRole"] = this.familyRole ? this.familyRole.toJSON() : <any>undefined;
        return data;
    }
}

export interface IUserFamilyRoleDto {
    user?: UserDto;
    family?: FamilyDto;
    familyRole?: FamilyRoleDto;
}

export class UserFamilyRoleListDto implements IUserFamilyRoleListDto {
    count?: number;
    items?: UserFamilyRoleDto[] | undefined;

    constructor(data?: IUserFamilyRoleListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.count = _data["count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(UserFamilyRoleDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UserFamilyRoleListDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserFamilyRoleListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["count"] = this.count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

export interface IUserFamilyRoleListDto {
    count?: number;
    items?: UserFamilyRoleDto[] | undefined;
}

export class SwaggerResponse<TResult> {
    status: number;
    headers: { [key: string]: any; };
    result: TResult;

    constructor(status: number, headers: { [key: string]: any; }, result: TResult)
    {
        this.status = status;
        this.headers = headers;
        this.result = result;
    }
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}